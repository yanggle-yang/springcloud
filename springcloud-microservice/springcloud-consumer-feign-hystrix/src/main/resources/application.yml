config:
  eureka:
    # 集群地址列表
    serverA: server-A
    serverB: server-B
    serverC: server-C

    # 集群端口列表
    portA: 9001
    portB: 9002
    portC: 9003

spring:
  application:
    name: app-consumer #服务名称

server:
  port: 10002 #服务端口

# Eureka配置
eureka:
  instance:
    # 是否微服务调用地址为IP优先(缺省值false)
    prefer-ip-address: false

    # 主机名称
    #hostname: app-consumer

    # 设置机器IP
    ip-address: 127.0.0.1

    # 设置注册中心微服务名(默认为：机器主机名:应用名称:应用端口)
    #instance-id: ${eureka.instance.hostname}:${server.port}
    instance-id: ${eureka.instance.ip-address}:${server.port}

    # 客户端向服务器发送心跳的频率(缺省值30s)
    lease-renewal-interval-in-seconds: 30

  client:
    # 是否将自己作为客户端注册到注册中心(缺省值true)
    register-with-eureka: true

    # 是否从注册中心获取注册信息(缺省值true)
    fetch-registry: true

    # 从注册中心获取注册信息的间隔时间(缺省值30s)
    # 测试环境，可以适当提高Client端拉取Server注册信息的频率
    registry-fetch-interval-seconds: 30

    service-url:
      defaultZone: "http://${config.eureka.serverA}:${config.eureka.portA}/eureka/, \
                    http://${config.eureka.serverB}:${config.eureka.portB}/eureka/, \
                    http://${config.eureka.serverC}:${config.eureka.portC}/eureka/"

#Feign配置
feign:
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full

#Hystrix熔断机制
hystrix:
  shareSecurityContext: true
  command:
    default:
      circuitBreaker:
        # 熔断后的重试时间窗口，且在该时间窗口内只允许一次重试。即在熔断开关打开后，
        # 在该时间窗口允许有一次重试，如果重试成功，则将重置Health采样统计并闭合
        # 熔断开关实现快速恢复，否则熔断开关还是打开状态，执行快速失败, 默认为为5s。
        sleepWindowInMilliseconds: 10000
        # 如果在一个采样时间窗口内，失败率超过该配置，则自动打开熔断开关实现降级处理，
        # 即快速失败。默认配置下采样周期为10s，失败率为50%。
        errorThresholdPercentage: 50
        # 在熔断开关闭合情况下，在进行失败率判断之前，一个采样周期内必须进行至少N个请求
        # 才能进行采样统计，目的是有足够的采样使得失败率计算正确，默认为20。
        requestVolumeThreshold: 20
        # 是否强制关闭熔断开关，如果强制关闭了熔断开关，则请求不会被降级，一些特殊场景
        # 可以动态配置该开关，默认为false。
        forceClosed: false
        # 是否强制打开熔断开关，如果强制打开可熔断开关，则请求强制降级调用getFallback
        # 处理，可以通过动态配置来打开该开关实现一些特殊需求，默认为false。
        forceOpen: false
      execution:
        isolation:
          thread:
            # 是否启用执行超时机制，默认为true
            timeoutEnabled: true
            # 执行超时时间，默认为1000毫秒，如果命令是线程隔离，且配置了executionIsolationThreadInterruptOnTimeout=true，
            # 则执行线程将执行中断处理。如果命令是信号量隔离，则进行终止操作，因为信号量隔离与主线程是
            # 在一个线程中执行，其不会中断线程处理，所以要根据实际情况来决定是否采用信号量隔离，尤其涉及
            # 网络访问的情况。
            timeoutInMilliseconds: 1000
            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，即Future#cancel(true)处理，
            # 默认为false。
            interruptOnFutureCancel: true
            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，默认为true。
            interruptOnTimeout: true

#Hystrix监控配置
#Actuator启用所有的监控端点，“*”号代表启用所有的监控端点，可以单独启用，例如：health，info，metrics
#spring boot升为2.0后，为了安全，默认Actuator只暴露了2个端点，heath 和 info，
#访问：http://localhost:10002/actuator/metrics
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS